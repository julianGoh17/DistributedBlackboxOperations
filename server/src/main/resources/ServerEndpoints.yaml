openapi: "3.0.0"
info:
  title: Server Endpoints
  version: 1.0.0
paths:
  ####################
  # Client Endpoints #
  ####################
  /client:
    post:
      operationId: postMessage
      description: Send a message to be stored in the Server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostedMessage"
      responses:
        '200':
          description: Successfully sent message to the Server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageIDResponse"
    get:
      operationId: getMessage
      description: Retrieve the message stored in the Server for a given UUID
      parameters:
        - name: messageId
          in: query
          description: The UUID of the message
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '504':
          description: Operation timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      operationId: deleteMessage
      description: Delete message stored in the Server for a given UUID
      parameters:
        - name: messageId
          in: query
          description: The UUID of the message
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageIDResponse"
        '404':
          description: Could not find message with UUID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ########################
  # Coordinate Endpoints #
  ########################
  /coordinate/label:
    post:
      operationId: "setLabel"
      description: Allows a user to label a Server with a string
      parameters:
        - in: query
          name: label
          schema:
            type: string
          required: true
      responses:
        '202':
          description: Successfully labeled the Server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerLabel"
        '504':
          description: Timed out trying to label the Server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      operationId: "getLabel"
      description: Allows user to retrieve the label of a server
      responses:
        '200':
          description: Successfully retrieved Server label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerLabel"

  /coordinate/message:
    post:
      operationId: "sendCoordinationMessage"
      description: Another Server sends a coordination message to this Server which will land in the Coordination queue.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoordinationMessage"
      responses:
        '200':
          description: Successfully sent coordination message
        '400':
          description: Coordination Message contains missing field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  ########################
  # Server Control Endpoint #
  ########################

  /server:
    post:
      operationId: "setServerSettings"
      description: Allows you to change various settings in the controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerSettings"
      responses:
        '202':
          description: Successfull updated server status and will return the server's updated state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerSettings"
    get:
      operationId: "getServerSettings"
      description: Allows you to query the server for its current settings
      responses:
        '200':
          description: Successfull updated server status and will return the server's updated state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerSettings"
components:
  schemas:
    PostedMessage:
      type: object
      properties:
        message:
          type: object
      required:
        - message
    MessageIDResponse:
      type: object
      properties:
        messageId:
          type: string
    MessageResponse:
      type: object
      properties:
        message:
          type: object
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
    ServerLabel:
      type: object
      properties:
        label:
          type: string
    ServerSettings:
      type: object
      properties:
        status:
          type: string
          nullable: true
        failureChance:
          type: number
          minimum: 0
          maximum: 1
          nullable: true
    CoordinationMessage:
      type: object
      properties:
        metadata:
          type: object
          properties:
            fromServerId:
              type: string
            timestamp:
              type: string
        message:
          type: object
        definition:
          type: object